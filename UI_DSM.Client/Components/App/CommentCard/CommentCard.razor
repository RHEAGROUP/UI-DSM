@using UI_DSM.Shared.Enumerator
<!--------------------------------------------------------------------------------------------------------
// CommentCard.razor
// Copyright (c) 2022 RHEA System S.A.
//
// Author: Antoine Théate, Sam Gerené, Alex Vorobiev, Alexander van Delft, Martin Risseeuw
//
// This file is part of UI-DSM.
// The UI-DSM web application is used to review an ECSS-E-TM-10-25 model.
//
// The UI-DSM application is provided to the community under the Apache License 2.0.
-------------------------------------------------------------------------------------------------------->

<div class="app-comment">
	<div class="app-comment__header">
			<DxDropDown 
				@bind-IsOpen="@this.IsOnStatusUpdateMode"
				Width="200"
				PositionTarget="@this.PositionTarget"
				PositionMode="DropDownPositionMode.Bottom">

				<BodyTemplate>
					@foreach (var status in AvailableStatus)
					{
						<div id="@status.ToString()" class="status-item" @onclick="() => this.ViewModel.UpdateStatus(status)">
							@if (this.ViewModel.Comment.Status == status)
							{
								<FeatherCheckSquare Size="20" Color="currentColor" />
							}
							else
							{
								<FeatherSquare Size="20" Color="currentColor" />
							}
							@status
						</div>
					}
				</BodyTemplate>
			</DxDropDown>
	</div>

	<div class="app-comment__body">
		<span class="app-comment__title">
			<span>
				<span class="app-comment__name">@(this.ViewModel.Comment.Author.ParticipantName)</span>
				<span class="app-comment__date">@(this.ViewModel.Comment.CreatedOn)</span>
			</span>


			@if (this.ViewModel.CurrentParticipant.IsAllowedTo(AccessRight.ReviewTask) && this.ViewModel.IsAllowedToEdit)
			{
				<button id="@this.CardUniqueId" class="app-comment__status" @onclick="() => this.IsOnStatusUpdateMode = true">
					@this.ViewModel.Comment.Status
					<FeatherChevronDown Size="20" Color="currentColor" StrokeWidth="2" />
				</button>
			}
		</span>
		<span class="app-comment__description">@((MarkupString)this.ViewModel.Comment.Content)</span>
	</div>

	<div class="app-comment__actions">
		@if (this.ViewModel.CurrentParticipant.IsAllowedTo(AccessRight.ReviewTask))
		{
			<button class="app-comment__button" @onclick="this.OnReplyCallback">
				<FeatherMessageCircle Size="20" Color="currentColor" StrokeWidth="2"/>
				Reply
			</button>
			@if (this.ViewModel.IsAllowedToEdit)
			{
				<button class="app-comment__button" @onclick="this.OnContentEditClick">
					<FeatherEdit Size="20" Color="currentColor" StrokeWidth="2"/>
					Edit
				</button>

				<button class="app-comment__button" @onclick="this.OnDeleteClick">
					<FeatherTrash2 Size="20" Color="currentColor" StrokeWidth="2"/>
					Delete
				</button>
			}
			<button class="app-comment__button" @onclick="this.OnLinkCallback">
				<FeatherLink2 Size="20" Color="currentColor" StrokeWidth="2"/>
				Link
			</button>
		}
	</div>

	@if (this.ViewModel.Comment.Replies.Any())
	{
		<div class="app-comment__replies">
		<AppAccordion Label="Replies" Variant="AppAccordion.VariantValue.Reply" PanelOpen="false">
			@foreach (var reply in this.ViewModel.Comment.Replies.OrderBy(x => x.CreatedOn))
			{
				<ReplyCard ViewModel="@(this.CreateReplyCardViewModel(reply))"/>
			}
		</AppAccordion>
		</div>
	}
	
	@if (this.ViewModel.LinkedRows.Any())
	{
		<div class="app-comment__annotatableItems">
			<AppAccordion Label="Linked Items" Variant="AppAccordion.VariantValue.Reply" PanelOpen="false">
				@foreach (var linkedItem in this.ViewModel.LinkedRows.OrderBy(x => x.Id))
				{
					<p>@linkedItem.Id</p>
				}
			</AppAccordion>
		</div>
	}
</div>