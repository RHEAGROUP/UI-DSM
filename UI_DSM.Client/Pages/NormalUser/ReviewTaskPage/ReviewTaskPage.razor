<!--------------------------------------------------------------------------------------------------------
// ReviewTaskPage.razor
// Copyright (c) 2022 RHEA System S.A.
// 
// Author: Antoine Théate, Sam Gerené, Alex Vorobiev, Alexander van Delft, Martin Risseeuw, Nabil Abbar
// 
// This file is part of UI-DSM. 
// The UI-DSM web application is used to review an ECSS-E-TM-10-25 model.
// 
// The UI-DSM application is provided to the community under the Apache License 2.0.
-------------------------------------------------------------------------------------------------------->
@page "/Project/{ProjectId}/Review/{ReviewId}/ReviewObjective/{ReviewObjectiveId}/ReviewTask/{ReviewTaskId}"
@using UI_DSM.Shared.Extensions
@using UI_DSM.Shared.Models
@using UI_DSM.Shared.Wrappers
@using UI_DSM.Shared.Enumerator

<PageTitle>Task | UI-DSM</PageTitle>

<ConfirmCancelPopup ViewModel="@this.ViewModel.DoneConfirmCancelPopup" />

<DxPopup CloseOnOutsideClick="false" HeaderText="Link comment" @bind-Visible="@this.ViewModel.IsLinkerVisible">
	<Content>
		<AnnotationLinker ViewModel="this.ViewModel.AnnotationLinkerViewModel"/> 
	</Content>
</DxPopup>
<div class="task-page">

	@if (!this.IsLoading && this.ViewModel.ReviewTask is null)
	{
		<div style="align-items: center; display: flex; justify-content: center;">
			<h3>No review task found</h3>
		</div>
	}
	else
	{
		if (this.ViewModel.ReviewObjective != null)
		{
			<aside class="task-page__sidebar task-page__sidebar__left">
				<AppAccordion Label="Review objective">
					<AppSidebarText Description="@(this.ViewModel.ReviewObjective.Description)"/>
				</AppAccordion>

				<AppAccordion Label="Tasks">
					@foreach (var task in this.ViewModel.ReviewObjective.ReviewTasks.OrderBy(x => x.TaskNumber))

					{
						<ReviewTaskCard UseNavLink="@(task.Id != this.ViewModel.ReviewTask.Id)"
						                ReviewTask="task" ProjectId="@(this.ProjectId)" ReviewId="@(this.ReviewId)" ReviewObjectiveId="@(this.ReviewObjectiveId)"/>
					}
				</AppAccordion>
			</aside>
		}

		<UI_DSM.Client.Components.App.LoadingComponent.LoadingComponent IsLoading="this.IsLoading">
			<main class="task-page__body">
				<div class="task-page__header">
					<h1 class="h3">@(this.ViewModel.ReviewTask.Description)</h1>
					<div class="task-page__actions">
						<AppButton Id="model-selector-button" Label="Select view" Type="button" Click="@(this.OpenModelSelector)">
							<FeatherDatabase Size="20" Color="currentColor" StrokeWidth="2"/> <span>@(this.GetModelName())</span>
						</AppButton>
						<DxDropDown @bind-IsOpen="@(this.ViewModel.ModelSelectorVisible)"
						            Width="200"
						            MaxHeight="500"
						            PositionTarget="#model-selector-button"
						            PositionMode="DropDownPositionMode.Bottom"
						            PreventCloseOnPositionTargetClick="true">
							<BodyTemplate>
								<DxListBox Data="@(this.ViewModel.AvailableModels)" TextFieldName="@nameof(Model.ModelName)"
								           @bind-Value="@(this.ViewModel.SelectedModel)"/>
							</BodyTemplate>
						</DxDropDown>

						<AppButton Id="view-selector-button" Label="Select view" Type="button" Click="@(this.OpenViewSelector)">
							<FeatherEye Size="20" Color="currentColor" StrokeWidth="2"/> <span>@(this.ViewModel.CurrentView.GetEnumDisplayName())</span>
						</AppButton>
						<DxDropDown @bind-IsOpen="@(this.ViewModel.ViewSelectorVisible)"
						            Width="200"
						            MaxHeight="500"
						            PositionTarget="#view-selector-button"
						            PositionMode="DropDownPositionMode.Bottom"
						            PreventCloseOnPositionTargetClick="true">
							<BodyTemplate>
								<DxListBox Data="@(this.ViewModel.AvailableViews)" TextFieldName="@nameof(ViewWrapper.ViewName)"
								           @bind-Value="@(this.ViewModel.SelectedView)"/>
							</BodyTemplate>
						</DxDropDown>

						@if (this.ViewModel.Participant.IsAllowedTo(AccessRight.ReviewTask) 
						     && this.ViewModel.ReviewTask.IsAssignedTo.Any(x => x.Id == this.ViewModel.Participant.Id))
						{
							@if (this.ViewModel.ReviewTask.Status == StatusKind.Open)
							{
								<AppButton Id="doneButton" Label="Mark as done" Type="button" Variant="AppButton.VariantValue.Success" Click="() => this.ViewModel.AskConfirmMarkTaskAsDoneOrUndone()">
									<FeatherCheckCircle Size="20" Color="CurrentColor" StrokeWidth="2" /> <span>Done</span>
								</AppButton>
							}
							else
							{
								<AppButton Id="undoneButton" Label="Mark as undone" Type="button" Variant="AppButton.VariantValue.Danger" Click="() => this.ViewModel.AskConfirmMarkTaskAsDoneOrUndone()">
									<FeatherXCircle Size="20" Color="#f44336" StrokeWidth="2" /> <span>Undone</span>
								</AppButton>
							}
						}

					</div>
				</div>
				<div class="task-page__body-inner">
					<DynamicComponent Type="@(this.ViewModel.CurrentBaseView)" @ref="this.BaseView"/>
				</div>
			</main>

			<aside class="task-page__sidebar task-page__sidebar__right">
				<ConfirmCancelPopup ViewModel="this.ViewModel.ConfirmCancelDialog"/>
				<SelectedItemCard @ref="this.SelectedItemCard" MarkAsReviewed="this.ViewModel.OpenConfirmDialog"/>
				<RelatedViews MainRelatedView="@(this.ViewModel.GetMainRelatedView())" OtherRelatedViews="@(this.ViewModel.GetOtherRelatedViews())"
				              OnViewSelect="@(this.OnViewSelect)"/>
				<Comments @ref="this.Comments"/>
			</aside>
		</UI_DSM.Client.Components.App.LoadingComponent.LoadingComponent>
	}
</div>