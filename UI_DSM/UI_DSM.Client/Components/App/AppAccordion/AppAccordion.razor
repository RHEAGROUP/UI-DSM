<!--------------------------------------------------------------------------------------------------------
// AppAccordion.razor
// Copyright (c) 2022 RHEA System S.A.
//
// Author: Antoine Théate, Sam Gerené, Alex Vorobiev, Alexander van Delft, Martin Risseeuw
//
// This file is part of UI-DSM.
// The UI-DSM web application is used to review an ECSS-E-TM-10-25 model.
//
// The UI-DSM application is provided to the community under the Apache License 2.0.
-------------------------------------------------------------------------------------------------------->

@namespace AppComponents

<div id="@(this.Id)" class="app-accordion">
	<button class="app-accordion__button @(this.ButtonClass) @(this.accordionVariant)" @onclick="this.TogglePanel"
		aria-label="@(this.Label)">
		<span>@(this.Label)</span>
		<span class="app-accordion__icon">
			<FeatherChevronUp Size="20" Color="currentColor" StrokeWidth="2" />
		</span>
	</button>
	<div class="app-accordion__panel @(this.PanelClass)">
		@(this.ChildContent)
	</div>
</div>

@code {

	/// <summary>
	/// The css class to apply to panel
	/// </summary>
	private string PanelClass => this.PanelOpen ? "app-accordion__panel--is-open" : null;

	/// <summary>
	/// The css class to apply to button
	/// </summary>
	private string ButtonClass => this.PanelOpen ? "app-accordion__button--is-active" : null;

	/// <summary>
	/// Different variants on the button, for styling purpose
	/// </summary>
	public enum VariantValue
	{
		Default,
		Small,
		Tiny
	}

	/// <summary>
	/// Gets or sets the <see cref="VariantValue" />
	/// </summary>
	[Parameter]
	public VariantValue Variant { get; set; } = VariantValue.Default;

	/// <summary>
	/// String value conversion based on <see cref="VariantValue" />
	/// </summary>
	private string accordionVariant { get; set; }

	/// <summary>
	/// Method invoked when the component is ready to start, having received its
	/// initial parameters from its parent in the render tree.
	/// </summary>
	protected override void OnInitialized()
	{
		this.accordionVariant = this.Variant switch
		{
			VariantValue.Default => "app-accordion__button--default",
			VariantValue.Small => "app-accordion__button--small",
			VariantValue.Tiny => "app-accordion__button--tiny",
			_ => ""
		};
	}

	/// <summary>
	/// Button label used as aria label and innerhtml
	/// </summary>
	[Parameter]
	public string Label { get; set; }

	/// <summary>
	/// HTML ID for the app accordion
	/// </summary>
	[Parameter]
	public string Id { get; set; }

	/// <summary>
	/// HTML child content for the panel
	/// </summary>
	[Parameter]
	public RenderFragment ChildContent { get; set; }

	/// <summary>
	/// Bool to keep track of the open state of the panel
	/// </summary>
	[Parameter]
	public bool PanelOpen { get; set; } = true;

	/// <summary>
	/// Method to toggle panel state
	/// </summary>
	private void TogglePanel()
	{
		this.PanelOpen = !this.PanelOpen;
	}
}