<!--------------------------------------------------------------------------------------------------------
// TaskPage.razor
// Copyright (c) 2022 RHEA System S.A.
// 
// Author: Antoine Théate, Sam Gerené, Alex Vorobiev, Alexander van Delft, Martin Risseeuw
// 
// This file is part of UI-DSM. 
// The UI-DSM web application is used to review an ECSS-E-TM-10-25 model.
// 
// The UI-DSM application is provided to the community under the Apache License 2.0.
-------------------------------------------------------------------------------------------------------->

@page "/project/1/review/1/objective/1/task/1"

<PageTitle>Task | UI-DSM</PageTitle>

<div class="task-page">
  <aside class="task-page__sidebar task-page__sidebar__left">
    <AppAccordion Label="Review objective">
      <AppSidebarText
        Description="Verify the proper translation and allocation of the ESA mission requirements into a set of system and subsystem technical specifications, including analysis and justification documents in terms of completeness, adequacy and consistency." />
    </AppAccordion>

    <AppAccordion Label="Tasks">
      <TaskItem TaskTitle="Check the requirements specification" IsDone="true" />
      <TaskItem TaskTitle="Check the requirements specification" />
      <TaskItem TaskTitle="Check the requirements specification" IsDone="true" />
    </AppAccordion>
  </aside>

  <main class="task-page__body">
    <div class="task-page__body-inner">
      <div class="task-page__actions">
        <div id="view-selector">
          <AppButton Label="Select view" Type="button" Variant="AppButton.VariantValue.Tertiary"
            Click="() => IsViewMenuOpen = !IsViewMenuOpen">
            <FeatherEye Size="20" Color="currentColor" StrokeWidth="2" /> <span>Functional to product</span>
          </AppButton>

          <DxDropDown @bind-IsOpen="@IsViewMenuOpen" PositionMode="DropDownPositionMode.Bottom"
            PositionTarget="#view-selector" CloseMode="DropDownCloseMode.Close" PreventCloseOnPositionTargetClick="true"
            BodyCssClass="list-dropdown">
            <ul>
              <li>
                <button @onclick="() => CurrentView = ViewValue.FunctionalToProduct">
                  Functional to product
                </button>
              </li>
              <li>
                <button @onclick="() => CurrentView = ViewValue.RequirementToFunction">
                  Requirement to function
                </button>
              </li>
              <li>
                <button @onclick="() => CurrentView = ViewValue.ReadinessLevel">
                  Readiness level
                </button>
              </li>
            </ul>
          </DxDropDown>
        </div>


        <div id="filter-selector">
          <AppButton Label="Filter data" Type="button" Variant="AppButton.VariantValue.Tertiary"
            Click="() => IsFilterMenuOpen = !IsFilterMenuOpen">
            <FeatherFilter Size="20" Color="currentColor" StrokeWidth="2" /> <span>Filter</span>
          </AppButton>

          <DxDropDown @bind-IsOpen="@IsFilterMenuOpen" PositionMode="DropDownPositionMode.Bottom"
            PositionTarget="#filter-selector" CloseMode="DropDownCloseMode.Close"
            PreventCloseOnPositionTargetClick="true" BodyCssClass="list-dropdown">
            <ul>
              <li>
                <DxCheckBox @bind-Checked="@CheckBox1" LabelWrapMode="LabelWrapMode.NoWrap"> Function 1 </DxCheckBox>
              </li>
              <li>
                <DxCheckBox @bind-Checked="@CheckBox2" LabelWrapMode="LabelWrapMode.NoWrap"> Function 2 </DxCheckBox>
              </li>
              <li>
                <DxCheckBox @bind-Checked="@CheckBox3" LabelWrapMode="LabelWrapMode.NoWrap"> Function 3 </DxCheckBox>
              </li>
            </ul>
          </DxDropDown>
        </div>

        <AppButton Label="Select visible columns" Type="button" Variant="AppButton.VariantValue.Tertiary">
          <FeatherColumns Size="20" Color="currentColor" StrokeWidth="2" /> <span>Columns</span>
        </AppButton>

        <AppButton Label="Mark as done" Type="button" Variant="AppButton.VariantValue.Success">
          <FeatherCheckCircle Size="20" Color="currentColor" StrokeWidth="2" /> <span>Done</span>
        </AppButton>
      </div>

      @if (CurrentView == ViewValue.FunctionalToProduct)
      {
        <AppTraceabilityTable />
      }
      else if (CurrentView == ViewValue.ReadinessLevel)
      {
        @CurrentView
      }
      else
      {
        @CurrentView
      }
    </div>
  </main>

  <aside class="task-page__sidebar task-page__sidebar__right">
    <WidgetRequirement />
    
    <AppAccordion Label="Comments">
      <AppComment Name="Kjell Lindgren" Date="3 minutes ago"
        Comment="Could you have a look at this data, and see if it aligns with yours?	" />

      <AppComment Name="Jessica Watkins" Date="31 minutes ago"
        Comment="Could you have a look at this data, and see if it aligns with yours?	" />
    </AppAccordion>
  </aside>
</div>



@code {
  /// <summary>
  /// Different variants on the button, for styling purpose
  /// </summary>
  public enum ViewValue
  {
    FunctionalToProduct,
    ReadinessLevel,
    RequirementToFunction
  }

  /// <summary>
  /// Bool to keep track of the open state of the user dropdown menu
  /// </summary>
  bool IsColumnMenuOpen { get; set; } = false;

  /// <summary>
  /// Bool to keep track of the open state of the view dropdown menu
  /// </summary>
  bool IsViewMenuOpen { get; set; } = false;

  /// <summary>
  /// Bool to keep track of the open state of the filter dropdown menu
  /// </summary>
  bool IsFilterMenuOpen { get; set; } = false;

  ViewValue CurrentView { get; set; } = ViewValue.FunctionalToProduct;


  bool CheckBox1 { get; set; } = true;
  bool CheckBox2 { get; set; } = true;
  bool CheckBox3 { get; set; } = false;


}